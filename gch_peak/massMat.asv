function [ Mmat,Pmat,UFmat,RFmat ] = massMat( Ord,x,Nelm )

elm_size=Ord+1;
if Ord==1 || Ord==0
    npt_quad=2;
elseif Ord==2
    npt_quad=3;
elseif Ord==3
    npt_quad=3;
elseif Ord==4
    npt_quad=4;
end
[qpt, qwt] = QuadLG(npt_quad);

un=zeros(elm_size,npt_quad);
un_der=zeros(elm_size,npt_quad);
mu_un=zeros(elm_size,1);
for k=1 : npt_quad
    un(:,k)=basis_1d(Ord,qpt(k));
    un_der(:,k)=basisDer_1d(Ord,qpt(k));
    mu_un(:,1)=mu_un(:,1)+qwt(k)*un(:,k);
end

Mmat=zeros(elm_size,elm_size,Nelm);
Pmat=zeros(elm_size,elm_size,Nelm);

for ne=1:Nelm
    Joca=(x(ne+1)-x(ne))/2;
    for k=1:npt_quad
        for j=1:elm_size
            for i=1:elm_size
                Mmat(i,j,ne)=Mmat(i,j,ne)+qwt(k)*un(i,k)*un(j,k)*Joca;
                Pmat(i,j,ne)=Pmat(i,j,ne)+qwt(k)*un_der(i,k)*un(j,k)*Joca;
            end
        end
    end
end

%imply the periodic boundary condition to get the neighbourhood.
nei=zeros(Nelm+1,3);
for m=1:Nelm
    if m==1
        nei(m,1)=Nelm;
        nei(m,2)=2;
    end
    if m==Nelm
        nei(m,1)=Nelm-1;
        nei(m,2)=1;
    end
    nei(m,1)=m-1;
    nei(m,2)=m+1;
end
% Matrix fomulated by the numerical flux, they are different from the
% choice of the flux

uf=zeros(elm_size,2);
uf(:,1)=basis_1d(Ord,-1);
uf(:,2)=basis_1d(Ord,1);

UFmat=zeros(elm_size,elm_size,2,Nelm); %uh takes plus
RFmat=zeros(elm_size,elm_size,2,Nelm);  %rh takes minus

for ne=1:Nelm
    for j=1:elm_size
        for i=1:elm_size
            UFmat(i,j,1,ne)=uf(i,1)*uf(j,1);
            UFmat(i,j,2,ne)=uf(i,2)*uf(j,1);
            
            RFmat(i,j,1,ne)=uf(i,1)*uf(j,2);
            RFmat(i,j,2,ne)=uf(i,2)*uf(j,2);
        end
    end
end



end

